generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // adjust if MySQL or SQLite
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts     Cart[]
  orders    Order[]
}

enum Role {
  ADMIN
  CUSTOMER
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id        String    @id @default(uuid())
  userId    String   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int       @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId]) // avoid duplicate products in one cart
}

model Order {
  id        String     @id @default(uuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // store at purchase time (donâ€™t rely on current Product.price)

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

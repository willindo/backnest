// ======================
// GENERATORS
// ======================
generator zod {
  provider  = "prisma-zod-generator"
  output    = "../src/generated/zod"
  relations = true
}

generator client {
  provider = "prisma-client-js"
}

// output   = "../node_modules/@prisma/client"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
// USER & ROLES
// ======================
model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String?
  role     Role    @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart?
  orders    Order[]
  wishlists Wishlist[]

  payments Payment[]
}

enum Role {
  ADMIN
  CUSTOMER
}

// ======================
// PRODUCTS
// ======================
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  stock       Int      @default(0)
  images      String[] // store multiple URLs

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  gender     Gender?

  sizes ProductSize[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Back relations
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

enum Gender {
  MENS
  WOMENS
  BOYS
  GIRLS
  UNISEX
}

// ======================
// PRODUCT SIZES (inventory-level granularity)
// ======================
model ProductSize {
  id        String  @id @default(cuid())
  size      Size
  quantity  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([productId, size])
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

// ======================
// CARTS
// ======================
model Cart {
  id     String     @id @default(cuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  size      Size?
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  // snapshot fields
  productName        String
  productPrice       Decimal
  productDescription String?
  productImage       String?

  @@unique([cartId, productId, size])
}

// ======================
// WISHLIST
// ======================
model Wishlist {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
}

model WishlistItem {
  id         String @id @default(cuid())
  productId  String
  wishlistId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
}

// ======================
// ORDERS
// ======================
model Order {
  id            String        @id @default(cuid())
  userId        String
  total         Decimal
  status        OrderStatus   @default(PENDING)
  paymentId     String? // Razorpay order/payment ID
  paymentStatus PaymentStatus @default(PENDING)
  address       Json? // flexible structure for shipping/billing
  notes         String?

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Decimal

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  orderId           String
  razorpayOrderId   String?  @unique
  razorpayPaymentId String?
  signature         String?
  amount            Int
  currency          String
  status            PaymentStatus
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}


enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

generator zod {
  provider  = "prisma-zod-generator"
  output    = "../src/generated/zod"
  relations = true
}

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql" // or "mysql"/"sqlite" depending on setup
  url      = env("DATABASE_URL")
}

// ----------------------
// User & Roles
// ----------------------
model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String?
  role     Role    @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts     Cart[]
  orders    Order[]
  wishlists Wishlist[]
}

enum Role {
  ADMIN
  CUSTOMER
}

// ----------------------
// Products
// ----------------------
model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  images      String[]
  
  // Relations
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?
  gender      Gender?

  sizes       ProductSize[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Back-relations
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
}


model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

enum Gender {
  MENS
  WOMENS
  BOYS
  GIRLS
  UNISEX
}

model ProductSize {
  id        String  @id @default(uuid())
  size      Size
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  size      Size?
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String

  @@unique([cartId, productId]) // <-- add this
}

model Wishlist {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  items     WishlistItem[]
  createdAt DateTime       @default(now())
}

model WishlistItem {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
}

// ----------------------
// Orders & Order Items
// ----------------------
model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id              String  @id @default(cuid())  // cuid() is preferred in Prisma
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Float   // clearer than just "price"

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}


enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}



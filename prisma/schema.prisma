generator zod {
  provider  = "prisma-zod-generator"
  output    = "../src/generated/zod"
  relations = "true"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String?
  role      Role       @default(CUSTOMER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      Cart?
  orders    Order[]
  payments  Payment[]
  wishlists Wishlist[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Decimal        // changed from Float -> Decimal
  stock         Int            // overall stock (optional if per-size inventory used)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  images        String[]
  categoryId    String?
  gender        Gender?
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  sizes         ProductSize[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model ProductSize {
  id        String  @id @default(cuid())
  size      Size
  quantity  Int
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, size])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id                 String  @id @default(cuid())
  cartId             String
  productId          String
  quantity           Int     @default(1)
  size               Size?
  productDescription String?
  productImage       String?
  productName        String?
  productPrice       Decimal?    // changed to Decimal
  cart               Cart    @relation(fields: [cartId], references: [id])
  product            Product @relation(fields: [productId], references: [id])

  // keep uniqueness per cart + product + size (size null allowed)
  @@unique([cartId, productId, size])
  @@index([productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique         // assume one wishlist per user
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  productId  String
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])

  @@unique([wishlistId, productId])
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  total             Decimal
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]
  payments          Payment[]
  latestPaymentId   String?       // âœ… optional quick reference
}


model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Decimal    // changed to Decimal
  size            Size?      // added, since you store size
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  orderId           String?
  signature         String?
  amount            Decimal       // changed to Decimal (store currency value precisely)
  currency          String
  createdAt         DateTime      @default(now())
  razorpayOrderId   String?       @unique
  razorpayPaymentId String?
  status            PaymentStatus @default(PENDING) // default
  user              User          @relation(fields: [userId], references: [id])
  order             Order?        @relation(fields: [orderId], references: [id])
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Gender {
  MENS
  WOMENS
  BOYS
  GIRLS
  UNISEX
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum OrderStatus {
  PENDING
  PROCESSING     // added
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql"/"sqlite" depending on setup
  url      = env("DATABASE_URL")
}

// ----------------------
// User & Roles
// ----------------------
model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String?
  role     Role    @default(CUSTOMER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts  Cart[]
  orders Order[]
}

enum Role {
  ADMIN
  CUSTOMER
}

// ----------------------
// Products
// ----------------------
model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  price       Int // smallest currency unit (e.g. paise/cents)
  currency    String   @default("INR")
  stock       Int      @default(0)
  images      String[] @default([]) // Postgres array
  sku         String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems  CartItem[] // ✅ relation back from CartItem
  orderItems OrderItem[] // ✅ relation back from OrderItem

  @@index([name])
  @@index([createdAt])
}

// ----------------------
// Cart & Cart Items
// ----------------------
model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) // one product per cart
}

// ----------------------
// Orders & Order Items
// ----------------------
model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // snapshot of product price

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

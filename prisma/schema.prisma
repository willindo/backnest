generator zod {
  provider  = "prisma-zod-generator"
  output    = "../src/generated/zod"
  relations = "true"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String?
  phone        String?       @unique
  role         Role          @default(CUSTOMER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  addresses    Address[]
  cart         Cart?
  orders       Order[]
  payments     Payment[]
  wishlists    Wishlist[]
  reviews      Review[]
  giftCards    GiftCard[] // user-owned cards
  couponUsages CouponUsage[] // coupons redeemed
}

model Address {
  id         String  @id @default(cuid())
  user       User?   @relation(fields: [userId], references: [id])
  userId     String?
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String

  orders Order[] // ðŸ‘ˆ Added: reverse relation for orders
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String?        @unique
  description   String?
  price         Decimal
  stock         Int            @default(0)
  categoryId    String?
  gender        Gender?
  images        String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      Category?      @relation(fields: [categoryId], references: [id])
  sizes         ProductSize[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]

  @@index([categoryId])
}

model ProductSize {
  id        String  @id @default(cuid())
  size      Size
  quantity  Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, size])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id                 String   @id @default(cuid())
  cartId             String
  productId          String
  quantity           Int      @default(1)
  size               Size?
  productName        String?
  productPrice       Decimal?
  productImage       String?
  productDescription String?
  cart               Cart     @relation(fields: [cartId], references: [id])
  product            Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, size])
  @@index([productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
}

model Order {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  address         Address?      @relation(fields: [addressId], references: [id])
  addressId       String?
  latestPaymentId String?       @unique // âœ… optional relation helper
  items           OrderItem[]
  totalAmount     Decimal       @default(0)
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  currency        String        @default("INR")
  shippingCost    Decimal       @default(0)
  taxAmount       Decimal       @default(0)
  discountAmount  Decimal       @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  couponUsages  CouponUsage[] // ðŸ‘ˆ Added reverse relation
  Payment       Payment[]
  GiftCardUsage GiftCardUsage[]
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Decimal
  size            Size?
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  orderId           String?
  signature         String?
  amount            Decimal
  currency          String        @default("INR")
  createdAt         DateTime      @default(now())
  razorpayOrderId   String?       @unique
  razorpayPaymentId String?
  status            PaymentStatus @default(PENDING)
  user              User          @relation(fields: [userId], references: [id])
  order             Order?        @relation(fields: [orderId], references: [id])
}

//
// --- Marketing Layer ---
//

// Coupon / Discount Codes
model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  description   String?
  discountType  DiscountType // e.g., PERCENTAGE or FIXED
  discountValue Float
  minPurchase   Float? // optional minimum spend
  maxDiscount   Float? // optional upper cap
  startDate     DateTime?
  endDate       DateTime?
  active        Boolean      @default(true)

  usages    CouponUsage[] // reverse relation
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CouponUsage {
  id       String  @id @default(cuid())
  coupon   Coupon  @relation(fields: [couponId], references: [id])
  couponId String
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  order    Order?  @relation(fields: [orderId], references: [id])
  orderId  String?

  usedAt DateTime @default(now())
}

// Gift Cards
model GiftCard {
  id        String          @id @default(cuid())
  code      String          @unique
  userId    String? // owner (if purchased)
  balance   Decimal
  isActive  Boolean         @default(true)
  issuedBy  String? // admin or system note
  createdAt DateTime        @default(now())
  expiresAt DateTime?
  user      User?           @relation(fields: [userId], references: [id])
  usages    GiftCardUsage[]
}

model GiftCardUsage {
  id         String   @id @default(cuid())
  giftCardId String
  orderId    String?
  amountUsed Decimal
  usedAt     DateTime @default(now())
  giftCard   GiftCard @relation(fields: [giftCardId], references: [id])
  order      Order?   @relation(fields: [orderId], references: [id])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Gender {
  MENS
  WOMENS
  BOYS
  GIRLS
  UNISEX
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
